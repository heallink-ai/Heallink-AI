# Development Dockerfile with hot reload
FROM python:3.11-slim

# Set environment variables for development
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONPATH=/app \
    NODE_ENV=development \
    PYTHON_ENV=development

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools
    gcc g++ make \
    # System libraries
    libffi-dev libssl-dev \
    # Audio/Video processing
    ffmpeg libavcodec-dev libavformat-dev libavutil-dev \
    libsndfile1-dev libasound2-dev \
    # Graphics libraries
    libgl1-mesa-glx libglib2.0-0 \
    # WebRTC dependencies
    libopus-dev libvpx-dev libx264-dev \
    # Development tools
    curl git vim \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install UV for Python package management
RUN pip install uv

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml requirements.txt ./

# Install Python dependencies with UV (including dev dependencies)
RUN uv venv && \
    . .venv/bin/activate && \
    uv pip install -r requirements.txt && \
    uv pip install pytest pytest-asyncio pytest-cov black isort flake8 mypy watchdog

# Install Node.js dependencies for renderer
COPY src/renderer/package*.json src/renderer/
RUN cd src/renderer && npm install

# Create non-root user for development
RUN useradd --create-home --shell /bin/bash --uid 1000 avatar && \
    chown -R avatar:avatar /app

USER avatar

# Activate virtual environment
ENV PATH="/app/.venv/bin:$PATH"

# Expose ports
EXPOSE 8080 8082

# Development command with hot reload
CMD ["python", "-m", "watchdog", "auto-restart", "--directory=src", "--pattern=*.py", "--recursive", "--", "python", "src/main.py", "--dev"]