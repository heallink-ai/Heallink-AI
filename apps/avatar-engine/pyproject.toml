[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "heallink-avatar-engine"
version = "0.1.0"
description = "Custom LiveKit avatar plugin for real-time 3D avatar rendering"
readme = "README.md"
authors = [
    {name = "HealLink Team", email = "dev@heallink.com"},
]
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["livekit", "avatar", "3d", "realtime", "webrtc"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications",
    "Topic :: Multimedia :: Graphics :: 3D Rendering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # LiveKit core
    "livekit==1.0.8",
    "livekit-agents==1.0.22",
    "livekit-api==1.0.2",
    "livekit-plugins-bey==1.0.22",
    "livekit-plugins-cartesia==1.0.22",
    "livekit-plugins-deepgram==1.0.22",
    "livekit-plugins-noise-cancellation==0.2.4",
    "livekit-plugins-openai==1.0.22",
    "livekit-plugins-silero==1.0.22",
    "livekit-plugins-turn-detector==1.0.22",
    "livekit-protocol==1.0.3",
    
    # Audio processing
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "numpy>=1.24.0",
    
    # 3D and image processing
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "imageio>=2.31.0",
    "imageio-ffmpeg>=0.4.8",
    
    # Machine learning
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    
    # WebRTC and networking
    "aiortc>=1.6.0",
    "websockets>=11.0.0",
    "aiohttp>=3.8.0",
    
    # Async and utilities
    "asyncio>=3.4.3",
    "aiofiles>=23.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "loguru>=0.7.0",
    
    # Mathematical operations
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    
    # Media processing
    "ffmpeg-python>=0.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

gpu = [
    "cupy-cuda12x>=12.0.0",  # CUDA support
    "onnxruntime-gpu>=1.15.0",
    "tensorrt>=8.6.0",
]

production = [
    "gunicorn>=21.2.0",
    "uvicorn[standard]>=0.23.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.29.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/heallink/avatar-engine"
Documentation = "https://docs.heallink.com/avatar-engine"
Repository = "https://github.com/heallink/avatar-engine"
Issues = "https://github.com/heallink/avatar-engine/issues"

[project.scripts]
avatar-engine = "avatar_engine.main:main"
avatar-test = "avatar_engine.tools.test:main"

[tool.hatch.build.targets.wheel]
packages = ["src/avatar_engine"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/assets",
    "/docs",
    "/tests",
    "README.md",
    "LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["avatar_engine"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "librosa.*",
    "torch.*",
    "torchvision.*",
    "torchaudio.*",
    "aiortc.*",
    "livekit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/avatar_engine",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src/avatar_engine"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]